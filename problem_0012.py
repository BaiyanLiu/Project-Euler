"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1
+ 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

https://projecteuler.net/problem=12
"""


import argparse

from utils import sieve


def get_args():
    # noinspection PyTypeChecker
    parser = argparse.ArgumentParser(
        description='What is the value of the first triangle number to have over n divisors?',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('n', type=int, help='Lower limit (exclusive)')
    return parser.parse_args()


def main():
    args = get_args()
    primes = sieve(100)
    x, y = 0, 0
    while x <= args.n or num_factors(x, primes) <= args.n:
        x += (y := y + 1)
    print(x)


def num_factors(n: int, primes: list[int]) -> int:
    factors = 1
    # If n = (prime1 ^ a) * (prime2 ^ b), then n has (a + 1) * (b + 1) factors
    for prime in primes:
        exponent = 0
        while n % prime == 0:
            n /= prime
            exponent += 1
        factors *= exponent + 1
    return factors


if __name__ == '__main__':
    main()
